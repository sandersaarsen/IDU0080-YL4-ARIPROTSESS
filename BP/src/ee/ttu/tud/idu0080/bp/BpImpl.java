
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package ee.ttu.tud.idu0080.bp;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.URL;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Logger;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.namespace.QName;

import org.example.pakkumus.Address;
import org.example.pakkumus.Pakkumus;
import org.example.pakkumus.PakkumusParing;
import org.example.pakkumus.PakkumusVastus;
import org.example.pakkumus.Pakkumus_Service;
import org.example.pakkumus.Seller;
import org.example.pakkumus.TellimusType;

import ee.ttu.tud.idu0080.kuller.Kuller;
import ee.ttu.tud.idu0080.kuller.Kuller_Service;
import ee.ttu.tud.idu0080.kuller.Kuller_Type;
import ee.ttu.tud.idu0080.transport.Transport;
import ee.ttu.tud.idu0080.transport.Transport_Service;
import ttu.idu0080.order.server.EntAddress;
import ttu.idu0080.order.server.Order;
import ttu.idu0080.order.server.OrderService;
import ttu.idu0080.order.server.OrderServiceService;
import ttu.idu0080.order.server.OrderShipmentService;
import ttu.idu0080.order.server.OrderShipmentServiceService;

/**
 * This class was generated by Apache CXF 2.5.9
 * 2017-05-13T20:45:14+03:00
 * Generated source version: 2.5.9
 * 
 */

@javax.jws.WebService(
                      serviceName = "bp",
                      portName = "bpSOAP",
                      targetNamespace = "http://idu0080.tud.ttu.ee/bp/",
                      wsdlLocation = "file:/C:/Users/Sander/Documents/Kool/Magister/2.Semester/IDU0080/4töö-workplace/BP/WebContent/bp.wsdl",
                      endpointInterface = "ee.ttu.tud.idu0080.bp.Bp")
                      
public class BpImpl implements Bp {

    private static final Logger LOG = Logger.getLogger(BpImpl.class.getName());
    private static final String ryhm = "ounapuu";

    /* (non-Javadoc)
     * @see ee.ttu.tud.idu0080.bp.Bp#tellimuseEsitamine(ee.ttu.tud.idu0080.bp.MinuTellimus  parameters )*
     */
    public ee.ttu.tud.idu0080.bp.MinuTellimuseVastus tellimuseEsitamine(MinuTellimus parameters) { 
        LOG.info("Executing operation tellimuseEsitamine");
        
        int tellimusId = parameters.getId().intValue();
        System.out.println("Tellimus id" + tellimusId);
        try {
        	
        	OrderServiceService oss = new OrderServiceService(
        			new URL("http://localhost:8080/BPServer/services/OrderServicePort?wsdl"), 
        			new QName("http://server.order.idu0080.ttu/", "OrderServiceService"));
            OrderService oport = oss.getOrderServicePort();
            
            //Fetch order from server with the id given
            System.out.println("Invoking getOrdersByOrderId...");
            ttu.idu0080.order.server.Order tellimus = oport.getOrdersByOrderId(tellimusId);
            System.out.println("Tellimus:" + tellimus.toString());

            Kuller_Service kss = new Kuller_Service(new URL("http://localhost:8080/BPTeenused/services/kullerSOAP?wsdl"), new QName("http://idu0080.tud.ttu.ee/kuller/", "kuller"));
            Kuller kport = kss.getKullerSOAP();  
            
            //Fetch couriers from the service
            System.out.println("Invoking getKullerid...");
            ee.ttu.tud.idu0080.kuller.KulleridVastus kullerid = kport.getKullerid();
            
            Pakkumus_Service pss = new Pakkumus_Service(new URL("http://localhost:8080/BPTeenused/services/pakkumusSOAP?wsdl"), new QName("http://www.example.org/pakkumus/", "pakkumus"));
            Pakkumus pakkumusPort = pss.getPakkumusSOAP();
            
            //Gather offers for each courier and select the best
            PakkumusVastus bestOffer = new PakkumusVastus();
            Kuller_Type bestCourier = new Kuller_Type();
            double bestOrderCoefficient = Double.MAX_VALUE;
            for(Kuller_Type kuller : kullerid.getKuller()) {
            	PakkumusVastus pakkumus = pakkumusPort.teePakkumus(new PakkumusParing(kuller.getKullerId(), generateTellimusType(tellimus)));
            	double orderCoefficient = pakkumus.getHind() + pakkumus.getPaevadeArv()/7.0;
            	if(orderCoefficient < bestOrderCoefficient) {
            		bestOrderCoefficient = orderCoefficient;
            		bestOffer = pakkumus;
            		bestCourier = kuller;
            	}
            }
            
            Transport_Service tss = new Transport_Service(new URL("http://localhost:8080/BPTeenused/services/transportSOAP?wsdl"), new QName("http://idu0080.tud.ttu.ee/transport/", "transport"));
            Transport transportPort = tss.getTransportSOAP();

            //Fetch tracking number
            String trackingNumber = transportPort.transport(bestOffer.getOfferId());
            System.out.println("Tracking number: " + trackingNumber);
            
            //Insert the order shipment
            OrderShipmentServiceService osss = new OrderShipmentServiceService(new URL("http://localhost:8080/BPServer/services/OrderShipmentServicePort?wsdl"), new QName("http://server.order.idu0080.ttu/", "OrderShipmentServiceService"));
            OrderShipmentService osport = osss.getOrderShipmentServicePort();  
            GregorianCalendar deliveryTime =  new GregorianCalendar();
            deliveryTime.setTimeInMillis(System.currentTimeMillis() + bestOffer.getPaevadeArv()*24*60*60*10*10*10);
            System.out.println("Invoking insertOrderShipment...");
            int orderShipmentId = osport.insertOrderShipment(
            		tellimus.getOrderId(),
            		ryhm,
            		trackingNumber,
            		bestCourier.getNimi(),
            		DatatypeFactory.newInstance().newXMLGregorianCalendar(deliveryTime),
            		new BigDecimal(bestOffer.getHind()).setScale(2, RoundingMode.HALF_UP).doubleValue());


            ee.ttu.tud.idu0080.bp.MinuTellimuseVastus loppVastus = new ee.ttu.tud.idu0080.bp.MinuTellimuseVastus();
            loppVastus.setTeade("Success - OrderShipmentId: " + orderShipmentId + ", TrackingNumber: " + trackingNumber + ", DeliveryTime: " + DatatypeFactory.newInstance().newXMLGregorianCalendar(deliveryTime).toString());
            return loppVastus;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    
    private TellimusType generateTellimusType(Order order) {
    	List<Address> sellerAddressList = new ArrayList<Address>();
    	
    	for(EntAddress entAddress : order.getSeller().getAddresses()) {
    		sellerAddressList.add(new Address(entAddress.getAddress(), entAddress.getCountry(), entAddress.getCounty(), entAddress.getStreetAddress(), entAddress.getTownVillage(), entAddress.getZipcode()));
    	}
    	Seller seller = new Seller(sellerAddressList, order.getSeller().getEnterprise(), order.getSeller().getName());
    	return new TellimusType(order.getOrderId(), order.getPriceTotal(), seller, new Address(order.getShippingAddress()));    	
    }

}
